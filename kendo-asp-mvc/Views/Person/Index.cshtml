
@{
    ViewBag.Title = "Grid";
}


<div id="commands">

    <div class="form-group">
        <div class="checkbox">
            <label>
                <input type="checkbox" id="toggleClickToEdit" checked> Click to edit
            </label>
        </div>
    </div>

    <div class="form-group">
        <div class="checkbox">
            <label>
                <input type="checkbox" id="toggleTabOnLastCell" checked> Tab on the last cell to commit
            </label>
        </div>
    </div>

    <div class="form-group">
        <div class="checkbox">
            <label>
                <input type="checkbox" id="toggleTabOnLastRow" checked> Tab on the last row to add new row
            </label>
        </div>
    </div>

</div>

<div id="example">
    <div id="grid"></div>
</div>

@section scripts {

    <script>

        var currentEditItem = null;
        var kendoGrid = null;
        var errorStates = {};

        function enableInCellEdit() {
            var options = kendoGrid.getOptions();
            options.editable.mode = "incell";
            options.columns[options.columns.length - 1] = { command: ["destroy"], title: "&nbsp;", width: "250px" };

            kendoGrid.setOptions(options);
        };

        function enableInlineEdit() {
            var options = kendoGrid.getOptions();
            options.editable.mode = "inline";
            options.columns[options.columns.length - 1] = { command: ["edit", "destroy"], title: "&nbsp;", width: "250px" };

            kendoGrid.setOptions(options);
        };

        $("#toggleClickToEdit").change(function () {

            if (this.checked) {
                enableInCellEdit();
            }
            else {
                enableInlineEdit();
            }

        });

        $(document).ready(function () {

            var dataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/person/list",
                        dataType: "json"
                    },
                    update: {
                        url: "/person/update",
                        dataType: "json",
                        type: "POST"
                    },
                    destroy: {
                        url: "/person/destroy",
                        dataType: "json",
                        type: "POST"
                    },
                    create: {
                        url: "/person/create",
                        dataType: "json",
                        type: "POST"
                    },
                },
                batch: false,
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            // validation should be turned off
                            Id: { editable: false, nullable: false },
                            Name: { validation: { required: false } },
                            Country: { type: "string", validation: { required: false } },
                            Email: { type: "string", validation: { required: false } },
                            uiid: { editable: false },
                        }
                    },
                    data: function (response) {
                        return response.Result;
                    },
                    errors: function (response) {
                        return response.Errors;
                    },
                },
                requestEnd: onRequestEnd,
            });

            function onRequestEnd(e) {

                if (e.response == null) {
                    return;
                }

                if (e.type === 'read') {
                    errorStates = {};
                    initUiids(e.response.Result);
                } else {
                    updateErrorState(e.response.Result.uiid, e.response.Errors);
                    updateGridRowStates();
                }
            }

            function initUiids(results) {
                $.each(results, function (index, item) {
                    item.uiid = kendo.guid();
                });
            };

            function updateErrorState(uiid, errors) {

                var hasErrors = errors == null ? false : errors.length > 0;

                if (hasErrors) {
                    errorStates[uiid] = errors;
                }
                else {
                    errorStates[uiid] = null;
                }
            }

            function updateGridRowStates() {

                jQuery.each(errorStates, function (uiid, errors) {

                    if (errors !== null) { updateRowState(uiid, errors); }

                });
            }

            function getfieldCellIndices() {

                var fieldCellIndices = {};

                for (var i = 0; i < kendoGrid.columns.length; i++) {
                    if (kendoGrid.columns[i].field) {
                        fieldCellIndices[kendoGrid.columns[i].field] = i;
                    }
                }

                return fieldCellIndices;
            };

            function updateRowState(uiid, errors) {

                var fieldCellIndices = getfieldCellIndices(), dataSource = kendoGrid.dataSource;

                for (var i = 0; i < errors.length; i++) {

                    var error = errors[i];
                    var item = findItemByUiid(uiid);

                    if (item == null) {
                        continue;
                    }

                    var row = kendoGrid.table.find("tr[data-uid='" + item.uid + "']");
                    var container = row.find("td:eq(" + fieldCellIndices[error.field] + ")");
                    container.addClass("cell-invalid");
                    container.attr('data-error', error.error);
                }
            }

            kendoGrid = $("#grid").kendoGrid({
                dataSource: dataSource,
                dataBound: onDataBound,
                save: onRowSave,
                autoBind: true,
                height: 550,
                groupable: true,
                sortable: true,
                navigatable: true,
                edit: onEdit,
                editable: {
                    createAt: "bottom",
                    mode: "incell"
                },
                remove: function (e) {
                    setTimeout(function () {
                        e.sender.dataSource.sync()
                    }, 0);
                },
                toolbar: ["create", "save", "cancel"],
                columns: [
                    // we need a template for each cell
                    { field: "Id", title: "Id" },
                    {
                        field: "Name", title: "Full Name", width: 240,
                        template: "#= (Name == null) ? ' ' : Name #</span><span class='validation-arrow'></span>",
                    },
                    {
                        field: "Email", title: "Email",
                        template: "#=Email#</span><span class='validation-arrow'></span>",
                    },
                    {
                        field: "Country", title: "Country", width: 150,
                        template: "#= (Country == null) ? ' ' : Country #</span><span class='validation-arrow'></span>"
                    },
                    { command: ["destroy"], title: "&nbsp;", width: "250px" }
                ]
            }).addClass('k-dirty-clear').data("kendoGrid");;

            $("#grid").kendoTooltip({
                filter: "td .validation-arrow",
                position: "right",
                callout: false,
                show: function (e) {
                    e.sender.element.addClass("validation-tooltip");
                },
                content: function (e) {
                    var content = e.target.closest("td").attr('data-error');
                    return content;
                }
            });

            kendoGrid.tbody.on('keydown', function (e) {

                if (e.originalEvent.keyCode != 9) {
                    return;
                }

                var isLastColumn = isOnLastColumn(e.target);
                var isLastRow = isOnLastRow(e.target);
                var hasChanges = kendoGrid.dataSource.hasChanges();

                if (isTabOnLastCellEnabled() && isLastColumn && isEditing() && hasChanges) {

                    setTimeout(function () {
                        kendoGrid.saveChanges();
                    }, 10);
                }
            });

            function onDataBound(e) {
                prepareCells(kendoGrid.table);
                updateGridRowStates();
            }

            function prepareCells(container) {
                container.find('td')
                    .css({ position: 'relative' })
            }

            function isOnLastColumn(target) {
                var lastDataColumnIndex = kendoGrid.columns.length - 2;
                var currentColumnIndex = $(target).closest('td').index();
                var isLastColumn = lastDataColumnIndex == currentColumnIndex;

                return isLastColumn;
            }

            function isOnLastRow(target) {
                var currentRowIndex = $(target).closest('tr').index();
                var lastRowIndex = kendoGrid.dataSource.total() - 1;

                return currentRowIndex === lastRowIndex;
            }

            function isEditing() {
                return $(kendoGrid.table).find('.k-grid-edit-row').length > 0;
            }

            function isTabOnLastCellEnabled() {
                return $('#toggleTabOnLastCell').is(':checked');
            }

            function isTabOnLastRowEnabled() {
                return $('#toggleTabOnLastRow').is(':checked');
            }

            function onRowSave(e) {
                console.log('save');
                prepareCells(e.container);
            };

            function onEdit(e) {

                // do not allow more that 5 rows
                if (e.model.isNew() && e.sender.dataSource.view().length > 5) {
                    e.sender.cancelRow();
                    alert('Cannot have more than 5 rows');
                }

                var model = e.model;
                var row = $(e.container).closest('tr');
                var dataItem = getDataItem(e.container);

                if (model.isNew() && (model.uiid === undefined || model.uiid === "")) {
                    prepareCells(row);
                    model.uiid = kendo.guid();
                }

                // Glitches with that
                //if (dataItem !== currentEditItem && currentEditItem != null) {
                //    currentEditItem = dataItem;
                //    kendoGrid.saveRow();

                //    setTimeout(function () {
                //        var row = kendoGrid.table.find("tr[data-uid='" + model.uid + "']");
                //        var cellIndex = e.container.index();
                //        var cell = row.find('td:eq(' + cellIndex +')');
                //        kendoGrid.editCell(cell);
                //    }, 50);

                //}
                //else {
                //    currentEditItem = dataItem;
                //}
            }

            function findItemByUiid(uiid) {
                var idx, length, data = kendoGrid.dataSource.data();
                if (!data) {
                    return;
                }
                for (idx = 0, length = data.length; idx < length; idx++) {
                    if (data[idx].uiid == uiid) {
                        return data[idx];
                    }
                }
            };

            function getDataItem(element) {
                var row = $(element).closest('tr');
                return kendoGrid.dataItem(row)
            }
        });
    </script>

}

